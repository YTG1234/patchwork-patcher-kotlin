plugins {
	id 'application'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'checkstyle'
	id 'com.jfrog.bintray' version '1.8.4'
	id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.4.30-M1'
}

tasks.withType(JavaCompile).configureEach {
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release.set(targetVersion)
	} else {
		sourceCompatibility = JavaVersion.toVersion(targetVersion)
		targetCompatibility = JavaVersion.toVersion(targetVersion)
	}
}

def ENV = System.getenv()
version = new String(file(".version").bytes).substring(1)
if (!(ENV.bintray_user && ENV.bintray_key)) {
	version = version + "-SNAPSHOT"
}
print(version)
group = 'net.patchworkmc'
archivesBaseName = 'patchwork-patcher'

checkstyle {
	configFile = rootProject.file("checkstyle.xml")
	toolVersion = '8.25'
}

sourceSets {
	cli {
		java {
			compileClasspath += main.output
			compileClasspath += sourceSets.main.compileClasspath
			runtimeClasspath += main.output
			runtimeClasspath += sourceSets.main.runtimeClasspath
		}
		kotlin {
			compileClasspath += main.output
			compileClasspath += sourceSets.main.compileClasspath
			runtimeClasspath += main.output
			runtimeClasspath += sourceSets.main.runtimeClasspath
		}
	}
	ui {
		java {
			compileClasspath += main.output
			compileClasspath += sourceSets.main.compileClasspath
			runtimeClasspath += main.output
			runtimeClasspath += sourceSets.main.runtimeClasspath
		}
		kotlin {
			compileClasspath += main.output
			compileClasspath += sourceSets.main.compileClasspath
			runtimeClasspath += main.output
			runtimeClasspath += sourceSets.main.runtimeClasspath
		}
	}
}

repositories {
	mavenCentral()
	maven {
		name = 'Fabric'
		url = 'http://maven.modmuss50.me/'
	}
	maven {
		url 'https://dl.bintray.com/patchworkmc/main/'
	}
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
}

dependencies {
	// ASM
	implementation 'org.ow2.asm:asm:9.0'
	implementation 'org.ow2.asm:asm-analysis:9.0'
	implementation 'org.ow2.asm:asm-commons:9.0'
	implementation 'org.ow2.asm:asm-tree:9.0'
	implementation 'org.ow2.asm:asm-util:9.0'

	// Patchwork
	implementation 'net.patchworkmc:patchwork-manifest:1.0.0'

	// Logging
	implementation 'org.apache.logging.log4j:log4j-api:2.13.2'
	implementation 'org.apache.logging.log4j:log4j-core:2.13.2'
	runtimeOnly 'net.minecrell:terminalconsoleappender:1.2.0'
	runtimeOnly 'org.jline:jline-terminal-jansi:3.12.1'

	// Other dependencies
	implementation 'net.fabricmc:tiny-remapper:0.3.1.72'

	// Needed for merging the client and server jar
	implementation ('net.fabricmc:stitch:0.4.6+build.74') {
		exclude module: 'enigma'
	}

	implementation 'com.electronwill.night-config:toml:3.6.0'

	implementation 'com.google.code.gson:gson:2.8.6'

	implementation "commons-io:commons-io:2.7"

	implementation "org.jetbrains:annotations:16.0.2"

	// Java has it's own XML parsers, but they were made before generics and are a perfect example
	// of awful corporate old java style.
	implementation "org.dom4j:dom4j:2.1.3"

	// kotlin go brr
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set 'sources'
	from sourceSets.main.allSource
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
shadowJar {
	transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
	minimize {
		exclude(dependency("org.dom4j:dom4j:2.1.3"))
		exclude(dependency("org.apache.logging.log4j:log4j-core:2.13.2"))
		exclude(dependency("net.minecrell:terminalconsoleappender:1.2.0"))
		exclude(dependency("org.jline:jline-terminal-jansi:3.12.1"))
		exclude(dependency("com.electronwill.night-config:toml:3.6.0"))
	}
}

task shadowCliJar(type: ShadowJar, dependsOn: shadowJar) {
	transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
	archiveClassifier.set("cli")
	from sourceSets.cli.output
	from zipTree(shadowJar.archiveFile.get())
	configurations = [ configurations.cliRuntime ]
	minimize {
		exclude(dependency("org.dom4j:dom4j:2.1.3"))
		exclude(dependency("org.apache.logging.log4j:log4j-core:2.13.2"))
		exclude(dependency("net.minecrell:terminalconsoleappender:1.2.0"))
		exclude(dependency("org.jline:jline-terminal-jansi:3.12.1"))
		exclude(dependency("com.electronwill.night-config:toml:3.6.0"))
	}

	manifest {
		attributes(
				'Implementation-Title': 'Patchwork Patcher (CLI)',
				'Implementation-Version': archiveVersion,
				'Main-Class': "net.patchworkmc.patcher.cli.PatchworkCLIKt"
		)
	}
}

task shadowUiJar(type: ShadowJar, dependsOn: shadowJar) {
	transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
	archiveClassifier.set("ui")
	from sourceSets.ui.output
	from zipTree(shadowJar.archiveFile.get())
	configurations = [ configurations.uiRuntime ]
	minimize {
		exclude(dependency("org.dom4j:dom4j:2.1.3"))
		exclude(dependency("org.apache.logging.log4j:log4j-core:2.13.2"))
		exclude(dependency("net.minecrell:terminalconsoleappender:1.2.0"))
		exclude(dependency("org.jline:jline-terminal-jansi:3.12.1"))
		exclude(dependency("com.electronwill.night-config:toml:3.6.0"))
	}
	manifest {
		attributes(
				'Implementation-Title': 'Patchwork Patcher (UI)',
				'Implementation-Version': archiveVersion,
				'Main-Class': "net.patchworkmc.patcher.ui.PatchworkUI"
		)
	}
}

shadowJar.finalizedBy shadowCliJar
shadowJar.finalizedBy shadowUiJar
publishing {
	publications {
		maven(MavenPublication) {
			groupId 'net.patchworkmc'
			artifactId "patchwork-patcher"
			version version

			artifact (jar)
			artifact (sourcesJar)
		}
	}
}

application {
	mainClassName "net.patchworkmc.patcher.ui.PatchworkUI"
	if (file('.classpath').exists()) {
		println("Eclipse detected. Disabling ANSI.")
		applicationDefaultJvmArgs = ['-Dpatchwork.log.disableAnsi=true']
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

def runDir = file("run")

if(!runDir.exists() && !runDir.mkdirs()) {
	throw new IOException("Failed to create run directory ${runDir.getAbsolutePath()}")
}

run {
	workingDir runDir
}

jar {
    manifest {
        attributes(
				'Implementation-Title': 'Patchwork Patcher',
				'Implementation-Version': archiveVersion
        )
    }
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : System.getenv('bintray_user')
	key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : System.getenv('bintray_key')
	publish = true
	override = true
	publications = ['mavenJava']
	pkg {
		repo = project.bintrayRepo
		name = project.name
		user = bintray.user
		userOrg = project.repoOwner
		licenses = [project.codeLicense]
		desc = project.description
		websiteUrl = "https://github.com/${project.repoOwner}/${project.repoName}"
		issueTrackerUrl = "https://github.com/${project.repoOwner}/${project.repoName}/issues"
		vcsUrl = "https://github.com/${project.repoOwner}/${project.repoName}.git"
		publicDownloadNumbers = true

		githubRepo = "${project.repoOwner}/${project.repoName}"
		version {
			name = project.version
			released = new Date()
		}
	}
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			pom {
				name = project.name
				description = project.description
				url = "https://github.com/${project.repoOwner}/${project.repoName}"
				licenses {
					license {
						name = project.codeLicense
					}
				}

				scm {
					url = "https://github.com/${project.repoOwner}/${project.repoName}"
				}
			}

			// add all the jars that should be included when publishing to maven
			afterEvaluate {
				artifact jar
				artifact sourcesJar
			}
		}
	}
}
task bumpVersion() {
	doLast {
		def versionSplit = ((String) version).split("\\.")
		new File(".version").write("v" + versionSplit[0] + "." + (versionSplit[1].toInteger() + 1))
	}
}
bintrayUpload.finalizedBy bumpVersion
task copyIdeaFiles(type: Copy) {
	if (file(".idea/").exists()) {
		from "idea-docs/"
		into ".idea/"
	}
}

copyIdeaFiles
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
